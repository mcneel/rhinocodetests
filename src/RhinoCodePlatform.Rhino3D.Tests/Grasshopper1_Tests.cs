using System;
using System.Collections.Generic;

using NUnit.Framework;

using Rhino.Runtime.Code;
using Rhino.Runtime.Code.Execution;
using Rhino.Runtime.Code.Text;

using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

namespace RhinoCodePlatform.Rhino3D.Tests
{
    [TestFixture]
    public class Grasshopper1_Tests : GH1ScriptFixture
    {
        [Test]
        public void TestGH1_Error()
        {
            const string source =
                "";

            Code code = GetGrasshopper().CreateCode(source);

            var ctx = new RunContext
            {
                Options = {
                    ["grasshopper.runAsCommand"] = false
                }
            };

            try
            {
                code.Run(ctx);
            }
            catch (Exception ex)
            {
                Assert.True(ex.Message.StartsWith("Data conversion failed from Boolean to Point"));
                return;
            }

            throw new Exception("Failed collecting error from Grasshopper definition");
        }

        [Test, TestCaseSource(nameof(GetTestDefinitions))]
        public void TestGH1_Script(ScriptInfo scriptInfo)
        {
            TestSkip(scriptInfo);

            Code code = GetGrasshopper().CreateCode(scriptInfo.Uri);

            RunContext ctx = GetRunContext(scriptInfo);

            ctx.AutoApplyParams = true;
            ctx.Options["grasshopper.runner.asCommand"] = false;
            ctx.Options["grasshopper.runner.extractDoc"] = GHDOC_PARAM;

            if (scriptInfo.ExpectsWarning)
            {
                ctx.Options["grasshopper.runner.warningsAreErrors"] = true;
            }

            if (TryRunCode(scriptInfo, code, ctx, out string errorMessage))
            {
                // NOTE:
                // definition with no errors, either need to have a 'result' collector
                if (ctx.Outputs.TryGet("result", out IGH_Structure data))
                {
                    if (data.DataCount > 0)
                        foreach (GH_Path p in data.Paths)
                        {
                            foreach (var d in data.get_Branch(p))
                                if (d is GH_Boolean result)
                                    Assert.True(result.Value);
                                else if (d is null)
                                    Assert.Fail($"Test result has null data");
                                else
                                    Assert.Fail($"Test result has non-boolean data");
                        }
                    else
                        Assert.Fail("Test result has no data");
                }
                // or have at least one assert component
                else
                {
                    bool hasAssertComponent = false;
                    GH_Document ghdoc = ctx.Outputs.Get<GH_Document>(GHDOC_PARAM);
                    foreach (IGH_DocumentObject docObj in ghdoc.Objects)
                    {
                        hasAssertComponent |= docObj.ComponentGuid == s_assertTrue;
                    }

                    Assert.True(hasAssertComponent);
                }
            }
            else if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                foreach (var line in errorMessage.ToLinesLazy())
                {
                    if (string.IsNullOrEmpty(line))
                        continue;

                    Assert.True(scriptInfo.MatchesError(line));
                }
            }
            else
            {
                Assert.Fail("Test failed with no error messages");
            }
        }

#if RC8_15
        [Test]
        public void TestGrasshopper_Flags_Defaults()
        {
            Code code = GetGrasshopper().CreateCode();

            ReadOnlyContextOptions cdefautls = code.GetContextOptionsDefaults();
            foreach (string key in cdefautls)
            {
                Assert.False(cdefautls.Get<bool>(key));
            }
        }
#endif

        static IEnumerable<object[]> GetTestDefinitions() => GetTestScripts(@"gh1\", "test_*.gh?");
    }
}
